import asyncio
import logging
import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§–∞–π–ª—ã
ADMINS_FILE = "admins.json"
BANNED_FILE = "banned.json"
MUTED_FILE = "muted.json"
CHATS_FILE = "chats.json"

ROLES = ["–°—Ç–∞–∂–µ—Ä", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü"]
OWNER_ID = 123456789  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# --- –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

admins = load_data(ADMINS_FILE)
banned = load_data(BANNED_FILE)
muted = load_data(MUTED_FILE)
chats = load_data(CHATS_FILE)

def get_role(user_id):
    if str(user_id) == str(OWNER_ID):
        return "–í–ª–∞–¥–µ–ª–µ—Ü"
    for username, info in admins.items():
        if str(info["id"]) == str(user_id):
            return info["role"]
    return None

def has_permission(user_id, required_role):
    user_role = get_role(user_id)
    if user_role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return True
    if user_role is None:
        return False
    return ROLES.index(user_role) >= ROLES.index(required_role)

# --- START ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ö–æ–º–∞–Ω–¥—ã: /setadm, /nahuisadm, /ban, /unban, /mute, /unmute, /admins, /chats")

# --- SET ADM ---
@dp.message(Command("setadm"))
async def setadm_handler(message: Message):
    if str(message.from_user.id) != str(OWNER_ID) and not has_permission(message.from_user.id, "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setadm @username –†–æ–ª—å")

    username = args[1].lstrip("@")
    role = args[2]

    if role not in ROLES or role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: –°—Ç–∞–∂–µ—Ä, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å")

    admins[username] = {"id": message.from_user.id, "role": role}
    save_data(ADMINS_FILE, admins)
    await message.answer(f"‚úÖ @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ {role}.")

# --- REMOVE ADM ---
@dp.message(Command("nahuisadm"))
async def nahuisadm_handler(message: Message):
    if str(message.from_user.id) != str(OWNER_ID) and not has_permission(message.from_user.id, "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nahuisadm @username")

    username = args[1].lstrip("@")
    if username in admins:
        role = admins[username]["role"]
        del admins[username]
        save_data(ADMINS_FILE, admins)
        await message.answer(f"‚ùå @{username} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {role}.")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.")

# --- ADMINS LIST ---
@dp.message(Command("admins"))
async def admins_handler(message: Message):
    if not admins:
        return await message.answer("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    admin_list = "\n".join([f"@{u} ‚Äî {info['role']}" for u, info in admins.items()])
    await message.answer(f"üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admin_list}\n\nüëë –í–ª–∞–¥–µ–ª–µ—Ü –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")

# --- BAN ---
@dp.message(Command("ban"))
async def ban_handler(message: Message):
    if not has_permission(message.from_user.id, "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –±–∞–Ω–∏—Ç—å.")
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username")
    username = args[1].lstrip("@")
    banned[username] = True
    save_data(BANNED_FILE, banned)
    await message.answer(f"‚õî @{username} –∑–∞–±–∞–Ω–µ–Ω.")

# --- UNBAN ---
@dp.message(Command("unban"))
async def unban_handler(message: Message):
    if not has_permission(message.from_user.id, "–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å.")
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
    username = args[1].lstrip("@")
    if username in banned:
        del banned[username]
        save_data(BANNED_FILE, banned)
        await message.answer(f"‚úÖ @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")

# --- MUTE ---
@dp.message(Command("mute"))
async def mute_handler(message: Message):
    if not has_permission(message.from_user.id, "–°—Ç–∞–∂–µ—Ä"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º—É—Ç–∏—Ç—å.")
    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username 10")
    username = args[1].lstrip("@")
    try:
        minutes = int(args[2])
    except ValueError:
        return await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
    until = (datetime.now() + timedelta(minutes=minutes)).timestamp()
    muted[username] = until
    save_data(MUTED_FILE, muted)
    await message.answer(f"üîá @{username} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")

# --- UNMUTE ---
@dp.message(Command("unmute"))
async def unmute_handler(message: Message):
    if not has_permission(message.from_user.id, "–°—Ç–∞–∂–µ—Ä"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–∞–∑–º—å—é—á–∏–≤–∞—Ç—å.")
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute @username")
    username = args[1].lstrip("@")
    if username in muted:
        del muted[username]
        save_data(MUTED_FILE, muted)
        await message.answer(f"‚úÖ @{username} —Ä–∞–∑–º—å—é—á–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –º—É—Ç–µ.")

# --- TRACK CHATS ---
@dp.message()
async def track_chats(message: Message):
    chat_id = message.chat.id
    chat_title = message.chat.title or message.chat.full_name or str(chat_id)

    if str(chat_id) not in chats:
        chats[str(chat_id)] = chat_title
        save_data(CHATS_FILE, chats)

# --- CHATS LIST ---
@dp.message(Command("chats"))
async def chats_handler(message: Message):
    if not has_permission(message.from_user.id, "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.")

    if not chats:
        return await message.answer("üì≠ –ë–æ—Ç –ø–æ–∫–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ –Ω–µ –∑–∞–º–µ—á–µ–Ω.")

    chat_list = "\n".join([f"{title} (`{chat_id}`)" for chat_id, title in chats.items()])
    await message.answer(f"üìã –ß–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç:\n{chat_list}", parse_mode="Markdown")

# --- MAIN ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
