import asyncio
import logging
import os
import json
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, exceptions
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN env var is required")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# files
ADMINS_FILE = "admins.json"
BANNED_FILE = "banned.json"
MUTED_FILE = "muted.json"

ROLES = ["–°—Ç–∞–∂–µ—Ä", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–í–ª–∞–¥–µ–ª–µ—Ü"]
OWNER_ID = 7294123971  # main owner id

def load_data(filename, default=None):
    if not os.path.exists(filename):
        return default if default is not None else {}
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

admins = load_data(ADMINS_FILE, {})
banned = load_data(BANNED_FILE, {})
# muted structure: keys are "<chat_id>:<user_id>" -> { "chat_id":..., "user_id":..., "until": unix_ts }
muted = load_data(MUTED_FILE, {})

# default permissions (in-code)
permissions = {
    "–°—Ç–∞–∂–µ—Ä": ["mute", "unmute"],
    "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä": ["mute", "unmute", "ban"],
    "–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä": ["mute", "unmute", "ban", "unban"],
    "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": ["mute", "unmute", "ban", "unban", "setadm", "nahuisadm", "setperm"],
    "–í–ª–∞–¥–µ–ª–µ—Ü": ["*"]
}

def get_role(user_id):
    if str(user_id) == str(OWNER_ID):
        return "–í–ª–∞–¥–µ–ª–µ—Ü"
    for username, info in admins.items():
        if str(info.get("id")) == str(user_id):
            return info.get("role")
    return None

def can_execute(user_id, command):
    role = get_role(user_id)
    if role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return True
    allowed = permissions.get(role, [])
    return "*" in allowed or command in allowed

def has_permission(user_id, required_role):
    # higher index = higher power
    user_role = get_role(user_id)
    if user_role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return True
    if user_role is None:
        return False
    try:
        return ROLES.index(user_role) >= ROLES.index(required_role)
    except ValueError:
        return False

async def resolve_target(message: Message, arg: str = None):
    """Return (user_id, full_name) or (None, None) if not found.
       Supports reply, numeric id, and @username (tries chat member first, then get_chat).
    """
    # reply
    if message.reply_to_message:
        u = message.reply_to_message.from_user
        return u.id, (u.full_name or u.username or str(u.id))

    if not arg:
        return None, None

    # try numeric id
    if arg.isdigit():
        try:
            return int(arg), None
        except Exception:
            pass

    username = arg.lstrip("@")

    # try find in the chat members
    try:
        cm = await bot.get_chat_member(message.chat.id, username)
        u = cm.user
        return u.id, (u.full_name or u.username or str(u.id))
    except exceptions.TelegramBadRequest:
        # not found in chat by username, try get_chat (works for @username)
        try:
            ch = await bot.get_chat("@" + username)
            return ch.id, (getattr(ch, 'title', None) or getattr(ch, 'username', None) or str(ch.id))
        except Exception:
            return None, None
    except Exception:
        return None, None

# --- command handlers ---

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≥—Ä—É–ø–ø–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ: /ban, /unban, /mute, /unmute, /setadm, /nahuisadm, /admins, /setperm")


@dp.message(Command("setadm"))
async def setadm_handler(message: Message):
    if not can_execute(message.from_user.id, "setadm"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setadm @username –†–æ–ª—å")
    username = args[1].lstrip("@")
    role = args[2]
    if role not in ROLES or role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: –°—Ç–∞–∂–µ—Ä, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å")
    # Try to resolve user id in current chat if possible
    user_id, _ = await resolve_target(message, args[1])
    if not user_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ª–æ–≥–∏–Ω—É –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, –Ω–æ id –ø—É—Å—Ç–æ–π.")
    admins[username] = {"id": int(user_id), "role": role}
    save_data(ADMINS_FILE, admins)
    await message.answer(f"‚úÖ @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ {role}.")


@dp.message(Command("nahuisadm"))
async def nahuisadm_handler(message: Message):
    if not can_execute(message.from_user.id, "nahuisadm"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nahuisadm @username")
    username = args[1].lstrip("@")
    if username in admins:
        del admins[username]
        save_data(ADMINS_FILE, admins)
        await message.answer(f"‚ùå @{username} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command("admins"))
async def admins_handler(message: Message):
    text = "üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
    for k, v in admins.items():
        text += f"- {k}: {v.get('id')} ({v.get('role')})\n"
    await message.answer(text)


async def ensure_group(message: Message):
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return False
    return True


@dp.message(Command("ban"))
async def ban_handler(message: Message):
    if not can_execute(message.from_user.id, "ban"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    if not await ensure_group(message):
        return
    args = message.text.split()
    arg = args[1] if len(args) > 1 else None
    user_id, name = await resolve_target(message, arg)
    if not user_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=int(user_id))
        banned_key = f"{message.chat.id}:{user_id}"
        banned[banned_key] = True
        save_data(BANNED_FILE, banned)
        await message.answer(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name or user_id} –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")


@dp.message(Command("unban"))
async def unban_handler(message: Message):
    if not can_execute(message.from_user.id, "unban"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    if not await ensure_group(message):
        return
    args = message.text.split()
    arg = args[1] if len(args) > 1 else None
    user_id, name = await resolve_target(message, arg)
    if not user_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è.")
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=int(user_id))
        banned_key = f"{message.chat.id}:{user_id}"
        if banned_key in banned:
            del banned[banned_key]
            save_data(BANNED_FILE, banned)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name or user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")


@dp.message(Command("mute"))
async def mute_handler(message: Message):
    if not can_execute(message.from_user.id, "mute"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    if not await ensure_group(message):
        return
    args = message.text.split()
    arg = args[1] if len(args) > 1 else None
    user_id, name = await resolve_target(message, arg)
    if not user_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞.")
    if len(args) > 2 and args[2].isdigit():
        minutes = int(args[2])
    else:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username 10  (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
    until = int(time.time()) + minutes * 60
    permissions_restrict = ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False, can_add_web_page_previews=False)
    try:
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=int(user_id), permissions=permissions_restrict, until_date=until)
        key = f"{message.chat.id}:{user_id}"
        muted[key] = {"chat_id": message.chat.id, "user_id": int(user_id), "until": until}
        save_data(MUTED_FILE, muted)
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name or user_id} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


@dp.message(Command("unmute"))
async def unmute_handler(message: Message):
    if not can_execute(message.from_user.id, "unmute"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    if not await ensure_group(message):
        return
    args = message.text.split()
    arg = args[1] if len(args) > 1 else None
    user_id, name = await resolve_target(message, arg)
    if not user_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—å—é—á–∏–≤–∞–Ω–∏—è.")
    try:
        permissions_allow = ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=int(user_id), permissions=permissions_allow)
        key = f"{message.chat.id}:{user_id}"
        if key in muted:
            del muted[key]
            save_data(MUTED_FILE, muted)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name or user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—å—é—á–∏–≤–∞–Ω–∏–∏: {e}")


@dp.message(Command("setperm"))
async def setperm_handler(message: Message):
    if not has_permission(message.from_user.id, "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º.")
    args = message.text.split()
    if len(args) < 4:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setperm –†–æ–ª—å –∫–æ–º–∞–Ω–¥–∞ on/off")
    role, command, action = args[1], args[2], args[3].lower()
    if role not in ROLES:
        return await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç.")
    if role == "–í–ª–∞–¥–µ–ª–µ—Ü":
        return await message.answer("üëë –£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    if action == "on":
        if command not in permissions.get(role, []):
            permissions.setdefault(role, []).append(command)
        return await message.answer(f"‚úÖ –î–ª—è —Ä–æ–ª–∏ {role} –≤–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /{command}.")
    elif action == "off":
        if command in permissions.get(role, []):
            permissions.get(role, []).remove(command)
        return await message.answer(f"‚ùå –î–ª—è —Ä–æ–ª–∏ {role} –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /{command}.")
    else:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ on –∏–ª–∏ off.")


async def unmute_watcher():
    while True:
        try:
            now = int(time.time())
            to_unmute = []
            for key, info in list(muted.items()):
                if info.get("until", 0) <= now:
                    to_unmute.append((key, info))
            for key, info in to_unmute:
                try:
                    permissions_allow = ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
                    await bot.restrict_chat_member(chat_id=info["chat_id"], user_id=info["user_id"], permissions=permissions_allow)
                except Exception as e:
                    logging.exception("error while auto-unmuting: %s", e)
                if key in muted:
                    del muted[key]
                    save_data(MUTED_FILE, muted)
            await asyncio.sleep(10)
        except Exception:
            await asyncio.sleep(5)

async def on_startup():
    asyncio.create_task(unmute_watcher())

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
